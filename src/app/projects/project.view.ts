import { AnyVirtualDOM, ChildrenLike, VirtualDOM } from '@youwol/rx-vdom'
import { PyYouwolClient, Routers } from '@youwol/local-youwol-client'
import { parseMd, Router } from '@youwol/mkdocs-ts'
import { DagFlowView } from './dag-flow.view'
import { State } from './state'
import {
    filterCtxMessage,
    onHTTPErrors,
    raiseHTTPErrors,
} from '@youwol/http-primitives'
import { FilesBrowserView, HdPathBookView, InfoSectionView } from '../common'
import { ExpandableGroupView } from '../common/expandable-group.view'
import { NewProjectFromTemplateView } from './new-project.view'
import { debounceTime, merge, mergeMap, of } from 'rxjs'
import { AppState } from '../app-state'
import { SelectedStepView } from './project/selected-step.view'
import { AssetsGateway, ExplorerBackend } from '@youwol/http-clients'

export class ProjectView implements VirtualDOM<'div'> {
    public readonly tag = 'div'
    public readonly children: ChildrenLike

    constructor({
        router,
        project,
        appState,
    }: {
        router: Router
        project: Routers.Projects.Project
        appState: AppState
    }) {
        const projectsState = appState.projectsState
        projectsState.openProject(project)
        this.children = [
            parseMd({
                src: `
# ${project.name}

**Version**: ${project.version}

<info>
A project is a folder on your computer featuring a \`yw_pipeline.py\` file.

</info>


*  The project is located in your computer at:
<projectFolder></projectFolder>

*  <cdnLink></cdnLink>

*  <explorerLink></explorerLink>

## Flow

<flow></flow>

<selectedStep></selectedStep>

## Artifacts

<info>
Artifacts are a set of files and folders generated by the steps in the pipeline. 
Artifacts can also reference links (e.g. coverage, bundle analysis).
Publishing a components means to publish all or a part of those artifacts.

</info>

<artifacts></artifacts>
`,
                router,
                views: {
                    info: (elem: HTMLElement) =>
                        new InfoSectionView({
                            text: elem.innerHTML,
                            router,
                        }),
                    projectFolder: () => {
                        return new HdPathBookView({
                            path: project.path,
                            appState,
                        })
                    },
                    cdnLink: () => {
                        return new CdnLinkView({ project, router })
                    },
                    explorerLink: () => {
                        return new ExplorerLinkView({ project, router })
                    },
                    flow: () =>
                        new FlowView({
                            flowId: 'prod',
                            projectsState,
                            project,
                        }),
                    selectedStep: () =>
                        new SelectedStepView({
                            flowId: 'prod',
                            projectsState,
                            project,
                        }),
                    artifacts: () =>
                        new ArtifactsView({
                            flowId: 'prod',
                            router,
                            projectsState,
                            project,
                        }),
                },
            }),
        ]
    }
}

export class FlowView implements VirtualDOM<'div'> {
    public readonly tag = 'div'
    public readonly children: ChildrenLike
    constructor({
        flowId,
        projectsState,
        project,
    }: {
        flowId: string
        projectsState: State
        project: Routers.Projects.Project
    }) {
        this.children = [
            {
                tag: 'div',
                children: [new DagFlowView({ project, projectsState, flowId })],
            },
        ]
    }
}

export class ArtifactsView implements VirtualDOM<'div'> {
    public readonly tag = 'div'
    public readonly children: ChildrenLike

    constructor({
        projectsState,
        router,
        project,
    }: {
        projectsState: State
        router: Router
        project: Routers.Projects.Project
        flowId: string
    }) {
        const event$ = projectsState.projectEvents[project.id].messages$.pipe(
            filterCtxMessage({
                withLabels: ['PipelineStepStatusResponse'],
                withAttributes: { projectId: project.id },
            }),
            debounceTime(1000),
        )
        this.children = {
            policy: 'replace',
            source$: merge(of(undefined), event$).pipe(
                mergeMap(() =>
                    projectsState.projectsClient.getArtifacts$({
                        projectId: project.id,
                        flowId: 'prod',
                    }),
                ),
                raiseHTTPErrors(),
            ),
            vdomMap: ({
                artifacts,
            }: {
                artifacts: Routers.Projects.GetArtifactResponse[]
            }) => {
                return artifacts.map((artifact) => {
                    return new ArtifactView({ artifact, router })
                })
            },
        }
    }
}
export class ArtifactView implements VirtualDOM<'div'> {
    public readonly tag = 'div'
    public readonly children: ChildrenLike
    constructor({
        artifact,
        router,
    }: {
        artifact: Routers.Projects.Artifact
        router: Router
    }) {
        this.children = [
            new ExpandableGroupView({
                title: artifact.id,
                icon: 'fas fa-box',
                content: () => {
                    return parseMd({
                        src: `
Links:
${artifact.links.map((l) => `*  [${l.name}](${l.url})\n`)}

**Files included**:

<filesBrowser></filesBrowser>                        
                        `,
                        router,
                        views: {
                            filesBrowser: () =>
                                new FilesBrowserView({
                                    startingFolder: artifact.path,
                                    originFolderIndex:
                                        artifact.path.split('/').length - 1,
                                }),
                        },
                    })
                },
            }),
        ]
    }
}

export class NewProjectsCard implements VirtualDOM<'div'> {
    public readonly tag = 'div'
    public readonly children: ChildrenLike

    constructor({ projectsState }: { projectsState: State }) {
        this.children = [
            {
                tag: 'div',
                class: 'pl-4 flex-grow-1 overflow-auto',
                children: {
                    policy: 'replace',
                    source$: projectsState.appState.environment$,
                    vdomMap: (
                        environment: Routers.Environment.EnvironmentStatusResponse,
                    ) => {
                        return environment.configuration.projects.templates.map(
                            (projectTemplate) =>
                                new ExpandableGroupView({
                                    title: projectTemplate.type,
                                    icon: projectTemplate.icon as AnyVirtualDOM,
                                    content: () =>
                                        new NewProjectFromTemplateView({
                                            projectsState,
                                            projectTemplate,
                                        }),
                                }),
                        )
                    },
                },
            },
        ]
    }
}

export class FailuresView implements VirtualDOM<'div'> {
    public readonly tag = 'div'
    public readonly children: ChildrenLike

    constructor({ appState }: { appState: AppState; router: Router }) {
        this.children = {
            policy: 'replace',
            source$: appState.projectsState.projectsFailures$,
            vdomMap: (failures: Routers.Projects.Failure[]) => {
                return failures.map((failure) => ({
                    tag: 'div' as const,
                    class: 'my-4',
                    children: [
                        new ExpandableGroupView({
                            title: {
                                tag: 'div',
                                style: {
                                    maxWidth: '75%',
                                },
                                children: [
                                    new HdPathBookView({
                                        path: failure.path,
                                        appState,
                                    }),
                                ],
                            },
                            icon: 'fas fa-times fv-text-error',
                            content: () => {
                                return {
                                    tag: 'pre',
                                    children: [
                                        {
                                            tag: 'div',
                                            class: 'pt-2 px-2 text-start overflow-auto fv-text-error ',
                                            style: {
                                                whiteSpace: 'pre-wrap',
                                            },
                                            innerText: failure['traceback'],
                                        },
                                    ],
                                }
                            },
                        }),
                    ],
                }))
            },
        }
    }
}

export class CdnLinkView implements VirtualDOM<'div'> {
    public readonly tag = 'div'
    public readonly children: ChildrenLike

    constructor({
        project,
        router,
    }: {
        project: Routers.Projects.Project
        router: Router
    }) {
        const client = new PyYouwolClient().admin.localCdn

        this.children = [
            {
                source$: client
                    .getPackage$({
                        packageId: window.btoa(project.name),
                    })
                    .pipe(
                        onHTTPErrors(() => undefined),
                        mergeMap(
                            (resp?: Routers.LocalCdn.GetPackageResponse) => {
                                if (resp === undefined) {
                                    return of(undefined)
                                }
                                return of(resp)
                            },
                        ),
                    ),
                vdomMap: (resp?: Routers.LocalCdn.GetPackageResponse) => {
                    if (resp == undefined) {
                        return parseMd({
                            src: 'The project has not been published in your components yet.',
                            router,
                        })
                    }
                    const type = resp.versions.slice(-1)[0]['type']
                    const topics = {
                        'js/wasm': 'js-wasm',
                        backend: 'backend',
                        pyodide: 'pyodide',
                    }
                    console.log('Resp', resp)
                    return parseMd({
                        src: `The project is published in components 
                        [here](@nav/components/${topics[type]}/${resp.id}).`,
                        router,
                    })
                },
            },
        ]
    }
}

export class ExplorerLinkView implements VirtualDOM<'div'> {
    public readonly tag = 'div'
    public readonly children: ChildrenLike

    constructor({
        project,
        router,
    }: {
        project: Routers.Projects.Project
        router: Router
    }) {
        const client = new AssetsGateway.Client().explorer
        const itemId = window.btoa(window.btoa(project.name))
        this.children = [
            {
                source$: client
                    .getItem$({
                        itemId,
                    })
                    .pipe(
                        onHTTPErrors(() => undefined),
                        mergeMap((resp?: ExplorerBackend.ItemBase) => {
                            if (resp === undefined) {
                                return of(undefined)
                            }
                            return client.getPath$({ itemId })
                        }),
                    ),
                vdomMap: (resp?: ExplorerBackend.PathBase) => {
                    if (resp == undefined) {
                        return parseMd({
                            src: 'The project has not been published in your explorer yet.',
                            router,
                        })
                    }
                    const folders = resp.folders.reduce(
                        (acc, e) => `${acc}/folder_${e.folderId}`,
                        `${resp.drive.groupId}/folder_${resp.drive.driveId}`,
                    )
                    const url = `${folders}/asset_${resp.item.assetId}`
                    return parseMd({
                        src: `The project is published in your explorer
                        [here](@nav/explorer/${url}).`,
                        router,
                    })
                },
            },
        ]
    }
}

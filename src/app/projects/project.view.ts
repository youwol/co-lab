import { AnyVirtualDOM, ChildrenLike, VirtualDOM } from '@youwol/rx-vdom'
import { Routers } from '@youwol/local-youwol-client'
import { parseMd, Router } from '@youwol/mkdocs-ts'
import { DagFlowView } from './dag-flow.view'
import { State } from './state'
import { raiseHTTPErrors } from '@youwol/http-primitives'
import { FilesBrowserView, HdPathBookView } from '../common'
import { ExpandableGroupView } from '../common/expandable-group.view'
import { NewProjectFromTemplateView } from './new-project.view'

export class ProjectView implements VirtualDOM<'div'> {
    public readonly tag = 'div'
    public readonly children: ChildrenLike

    constructor({
        router,
        project,
        projectsState,
    }: {
        router: Router
        project: Routers.Projects.Project
        projectsState: State
    }) {
        projectsState.openProject(project)
        this.children = [
            parseMd({
                src: `
# ${project.name}

A project is a folder on your computer featuring a \`yw_pipeline.py\` file.

`,
                router,
            }),
            new FlowView({ flowId: 'prod', router, projectsState, project }),
        ]
    }
}

export class FlowView implements VirtualDOM<'div'> {
    public readonly tag = 'div'
    public readonly children: ChildrenLike
    constructor({
        flowId,
        router,
        projectsState,
        project,
    }: {
        flowId: string
        router: Router
        projectsState: State
        project: Routers.Projects.Project
    }) {
        this.children = [
            {
                tag: 'div',
                children: [new DagFlowView({ project, projectsState, flowId })],
            },
            parseMd({
                src: `## Artifacts
                
Artifacts are a set of files and folders generated by the steps in the pipeline. 
Artifacts can also reference links (e.g. coverage, bundle analysis).
Publishing a components means to publish all or a part of those artifacts.
                `,
                router,
            }),
            {
                source$: projectsState.projectsClient
                    .getArtifacts$({
                        projectId: project.id,
                        flowId,
                    })
                    .pipe(raiseHTTPErrors()),
                vdomMap: ({
                    artifacts,
                }: {
                    artifacts: Routers.Projects.Artifact[]
                }) => {
                    console.log(artifacts)
                    return {
                        tag: 'div',
                        children: artifacts.map(
                            (artifact) =>
                                new ArtifactView({ artifact, router }),
                        ),
                    }
                },
            },
            //...project.pipeline.flows[0].dag,
        ]
    }
}

export class ArtifactView implements VirtualDOM<'div'> {
    public readonly tag = 'div'
    public readonly children: ChildrenLike
    constructor({
        artifact,
        router,
    }: {
        artifact: Routers.Projects.Artifact
        router: Router
    }) {
        this.children = [
            parseMd({
                src: `## ${artifact.id}
        
Links:
${artifact.links.map((l) => `*  [${l.name}](${l.url})\n`)}
               
**Files included**: 

<filesBrowser></filesBrowser>      
                `,
                router,
                views: {
                    filesBrowser: () =>
                        new FilesBrowserView({
                            startingFolder: artifact.path,
                            originFolderIndex:
                                artifact.path.split('/').length - 1,
                        }),
                },
            }),
        ]
    }
}

export class NewProjectsCard implements VirtualDOM<'div'> {
    public readonly tag = 'div'
    public readonly children: ChildrenLike

    constructor({ projectsState }: { projectsState: State }) {
        this.children = [
            {
                tag: 'div',
                class: 'pl-4 flex-grow-1 overflow-auto',
                children: {
                    policy: 'replace',
                    source$: projectsState.appState.environment$,
                    vdomMap: (
                        environment: Routers.Environment.EnvironmentStatusResponse,
                    ) => {
                        return environment.configuration.projects.templates.map(
                            (projectTemplate) =>
                                new ExpandableGroupView({
                                    title: projectTemplate.type,
                                    icon: projectTemplate.icon as AnyVirtualDOM,
                                    content: () =>
                                        new NewProjectFromTemplateView({
                                            projectsState,
                                            projectTemplate,
                                        }),
                                }),
                        )
                    },
                },
            },
        ]
    }
}

export class FailuresView implements VirtualDOM<'div'> {
    public readonly tag = 'div'
    public readonly children: ChildrenLike

    constructor({ projectsState }: { projectsState: State }) {
        this.children = {
            policy: 'replace',
            source$: projectsState.projectsFailures$,
            vdomMap: (failures: Routers.Projects.Failure[]) => {
                return failures.map((failure) => ({
                    tag: 'div' as const,
                    class: 'my-4',
                    children: [
                        new ExpandableGroupView({
                            title: {
                                tag: 'div',
                                style: {
                                    maxWidth: '75%',
                                },
                                children: [
                                    new HdPathBookView({
                                        path: failure.path,
                                    }),
                                ],
                            },
                            icon: 'fas fa-times fv-text-error',
                            content: () => {
                                return {
                                    tag: 'pre',
                                    children: [
                                        {
                                            tag: 'div',
                                            class: 'pt-2 px-2 text-start overflow-auto fv-text-error ',
                                            style: {
                                                whiteSpace: 'pre-wrap',
                                            },
                                            innerText: failure['traceback'],
                                        },
                                    ],
                                }
                            },
                        }),
                    ],
                }))
            },
        }
    }
}

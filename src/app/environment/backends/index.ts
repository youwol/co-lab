import { ChildrenLike, VirtualDOM } from '@youwol/rx-vdom'
import { ExplicitNode, parseMd, Router, Views } from '@youwol/mkdocs-ts'
import { AppState } from '../../app-state'
import { InfoSectionView } from '../../common'
import { BehaviorSubject, Observable, of } from 'rxjs'
import { raiseHTTPErrors } from '@youwol/http-primitives'
import { PyYouwolClient, Routers } from '@youwol/local-youwol-client'
import { LogsExplorerView } from '../../common/logs-explorer.view'
import { mergeMap, shareReplay } from 'rxjs/operators'
import { ImmutableTree } from '@youwol/rx-tree-views'

function backendId(backend: Routers.Environment.ProxiedBackend) {
    return window.btoa(`${backend.name}#${backend.version}`)
}
function backendName(backend: Routers.Environment.ProxiedBackend) {
    return `${backend.name}#${backend.version}`
}

export const navigation = (appState: AppState) => ({
    name: 'Backends',
    icon: { tag: 'i', class: 'fas fa-server mr-2' },
    tableOfContent: Views.tocView,
    html: ({ router }) => new PageView({ router, appState }),
    '/**': ({ path, router }: { path: string; router: Router }) => {
        const parts = path.split('/').filter((d) => d != '')
        return of({
            tableOfContent: Views.tocView,
            children: [],
            html: async () => {
                const id = window.atob(parts.slice(-1)[0])
                return new ExampleBackendView({
                    backend: {
                        name: id.split('#')[0],
                        version: id.split('#')[1],
                    },
                    router,
                    appState,
                })
            },
        })
    },
})
export function mountBackends({
    backends,
    treeState,
}: {
    backends: Routers.Environment.ProxiedBackend[]
    treeState: ImmutableTree.State<ExplicitNode>
    router: Router
}) {
    const basePath = `/environment/backends`
    const parentNode = treeState.getNode(`/environment/backends`)
    parentNode.resolveChildren().subscribe()
    backends.forEach((backend) => {
        const name = backendName(backend)
        const id = backendId(backend)
        const href = `${basePath}/${id}`
        const node = new ExplicitNode({
            id: `/${basePath}/${id}`,
            name,
            children: undefined,
            href,
            icon: { tag: 'i', class: 'fas fa-running mr-2' },
        })
        if (!treeState.getNode(node.id)) {
            treeState.addChild(basePath, node)
        }
    })
}

export class PageView implements VirtualDOM<'div'> {
    public readonly tag = 'div'
    public readonly children: ChildrenLike

    constructor({ router }: { appState: AppState; router: Router }) {
        this.children = [
            parseMd({
                src: `
# Backends

<info>
This page gathers information related to the running backends.

</info>
`,
                router,
                views: {
                    info: (elem: HTMLElement) => {
                        return new InfoSectionView({
                            text: elem.innerHTML,
                            router,
                        })
                    },
                },
            }),
        ]
    }
}

export class ExampleBackendView implements VirtualDOM<'div'> {
    public readonly tag = 'div'
    public readonly children: ChildrenLike

    constructor({
        backend,
        router,
    }: {
        backend: { name: string; version: string }
        appState: AppState
        router: Router
    }) {
        const refresh$ = new BehaviorSubject(true)
        const logs$ = refresh$.pipe(
            mergeMap(() =>
                new PyYouwolClient().admin.system.queryBackendLogs$({
                    name: backend.name,
                    version: backend.version,
                }),
            ),
            raiseHTTPErrors(),
            shareReplay({ bufferSize: 1, refCount: true }),
        )
        this.children = [
            parseMd({
                src: `
# ${backend.name}

**Version**: ${backend.version}

You can find the associated component in your database [here](@nav/components/backends/${window.btoa(backend.name)}).

Below are gathered the logs generated by the service.

Click <refresh></refresh> to refresh the entries.

## Install outputs

<install></install>

## Server outputs 

<backendOut></backendOut>

## Logs 

<backendLogs></backendLogs>
`,
                router,
                views: {
                    info: (elem: HTMLElement) => {
                        return new InfoSectionView({
                            text: elem.innerHTML,
                            router,
                        })
                    },
                    refresh: () => ({
                        tag: 'i',
                        class: 'fas fa-sync fv-pointer p-1 border rounded fv-hover-text-focus',
                        onclick: () => refresh$.next(true),
                    }),
                    backendLogs: () => {
                        return new LogsExplorerView({
                            rootLogs$: logs$,
                        })
                    },
                    install: () => {
                        return new InstallView({ logs$ })
                    },
                    backendOut: () => {
                        return new OutputsView({
                            logs$,
                        })
                    },
                },
            }),
        ]
    }
}

class OutputsView implements VirtualDOM<'pre'> {
    public readonly tag = 'pre'
    public readonly children: ChildrenLike
    public readonly style = {
        backgroundColor: 'black',
        color: 'white',
        fontSize: 'smaller',
        minHeight: '25vh',
        maxHeight: '50vh',
    }
    constructor({
        logs$,
    }: {
        logs$: Observable<Routers.System.BackendLogsResponse>
    }) {
        this.children = {
            policy: 'replace',
            source$: logs$,
            vdomMap: (resp: Routers.System.BackendLogsResponse) => {
                return resp.server_outputs.reverse().map((text) => ({
                    tag: 'div',
                    innerText: text,
                }))
            },
        }
    }
}

class InstallView implements VirtualDOM<'pre'> {
    public readonly tag = 'pre'
    public readonly children: ChildrenLike
    public readonly style = {
        backgroundColor: 'black',
        color: 'white',
        fontSize: 'smaller',
        minHeight: '25vh',
        maxHeight: '50vh',
    }
    constructor({
        logs$,
    }: {
        logs$: Observable<Routers.System.BackendLogsResponse>
    }) {
        this.children = {
            policy: 'replace',
            source$: logs$,
            vdomMap: (log: Routers.System.BackendLogsResponse) => {
                return log.install_outputs.map((text) => ({
                    tag: 'div',
                    innerText: text,
                }))
            },
        }
    }
}
